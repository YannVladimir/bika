{"ast":null,"code":"import{api}from'./apiClient';// Authentication endpoints\nconst AUTH_ENDPOINTS={LOGIN:'/api/auth/login',REGISTER:'/api/auth/register',LOGOUT:'/api/auth/logout',REFRESH:'/api/auth/refresh',PROFILE:'/api/v1/users/profile'};// Local storage keys\nconst STORAGE_KEYS={ACCESS_TOKEN:'access_token',REFRESH_TOKEN:'refresh_token',USER_DATA:'user_data'};// Authentication Service\nexport class AuthService{/**\r\n   * Login user with username/email and password\r\n   */static async login(credentials){try{const response=await api.post(AUTH_ENDPOINTS.LOGIN,credentials);// Store tokens and user data\nthis.storeAuthData(response);return response;}catch(error){console.error('Login failed:',error);throw error;}}/**\r\n   * Register new user\r\n   */static async register(userData){try{const response=await api.post(AUTH_ENDPOINTS.REGISTER,userData);// Store tokens and user data\nthis.storeAuthData({accessToken:response.accessToken,refreshToken:response.refreshToken,user:response.user});return response;}catch(error){console.error('Registration failed:',error);throw error;}}/**\r\n   * Logout user and clear stored data\r\n   */static async logout(){try{// Call logout endpoint if token exists\nconst token=this.getAccessToken();if(token){await api.post(AUTH_ENDPOINTS.LOGOUT);}}catch(error){console.error('Logout API call failed:',error);// Continue with local logout even if API call fails\n}finally{// Always clear local storage\nthis.clearAuthData();}}/**\r\n   * Get current user profile\r\n   */static async getCurrentUser(){try{const response=await api.get(AUTH_ENDPOINTS.PROFILE);// Update stored user data\nlocalStorage.setItem(STORAGE_KEYS.USER_DATA,JSON.stringify(response));return response;}catch(error){console.error('Failed to fetch current user:',error);throw error;}}/**\r\n   * Refresh access token\r\n   */static async refreshToken(){try{const refreshToken=this.getRefreshToken();if(!refreshToken){throw new Error('No refresh token available');}const response=await api.post(AUTH_ENDPOINTS.REFRESH,{refreshToken});// Update stored tokens\nlocalStorage.setItem(STORAGE_KEYS.ACCESS_TOKEN,response.accessToken);localStorage.setItem(STORAGE_KEYS.REFRESH_TOKEN,response.refreshToken);return response.accessToken;}catch(error){console.error('Token refresh failed:',error);// Clear auth data if refresh fails\nthis.clearAuthData();throw error;}}/**\r\n   * Check if user is authenticated\r\n   */static isAuthenticated(){const token=this.getAccessToken();const user=this.getStoredUser();if(!token||!user){return false;}// Check if token is expired (basic check)\ntry{const tokenPayload=this.parseJwtToken(token);const currentTime=Date.now()/1000;return tokenPayload.exp>currentTime;}catch(_unused){return false;}}/**\r\n   * Get stored access token\r\n   */static getAccessToken(){return localStorage.getItem(STORAGE_KEYS.ACCESS_TOKEN);}/**\r\n   * Get stored refresh token\r\n   */static getRefreshToken(){return localStorage.getItem(STORAGE_KEYS.REFRESH_TOKEN);}/**\r\n   * Get stored user data\r\n   */static getStoredUser(){try{const userData=localStorage.getItem(STORAGE_KEYS.USER_DATA);return userData?JSON.parse(userData):null;}catch(_unused2){return null;}}/**\r\n   * Update stored user data\r\n   */static updateStoredUser(user){localStorage.setItem(STORAGE_KEYS.USER_DATA,JSON.stringify(user));}/**\r\n   * Store authentication data\r\n   */static storeAuthData(authData){localStorage.setItem(STORAGE_KEYS.ACCESS_TOKEN,authData.accessToken);localStorage.setItem(STORAGE_KEYS.REFRESH_TOKEN,authData.refreshToken);localStorage.setItem(STORAGE_KEYS.USER_DATA,JSON.stringify(authData.user));}/**\r\n   * Clear all authentication data\r\n   */static clearAuthData(){localStorage.removeItem(STORAGE_KEYS.ACCESS_TOKEN);localStorage.removeItem(STORAGE_KEYS.REFRESH_TOKEN);localStorage.removeItem(STORAGE_KEYS.USER_DATA);}/**\r\n   * Parse JWT token payload\r\n   */static parseJwtToken(token){try{const base64Url=token.split('.')[1];const base64=base64Url.replace(/-/g,'+').replace(/_/g,'/');const jsonPayload=decodeURIComponent(atob(base64).split('').map(c=>'%'+('00'+c.charCodeAt(0).toString(16)).slice(-2)).join(''));return JSON.parse(jsonPayload);}catch(_unused3){throw new Error('Invalid token format');}}/**\r\n   * Get user role\r\n   */static getUserRole(){const user=this.getStoredUser();return(user===null||user===void 0?void 0:user.role)||null;}/**\r\n   * Check if user has specific role\r\n   */static hasRole(role){const userRole=this.getUserRole();return userRole===role;}/**\r\n   * Check if user is admin (SUPER_ADMIN or COMPANY_ADMIN)\r\n   */static isAdmin(){const userRole=this.getUserRole();return userRole==='SUPER_ADMIN'||userRole==='COMPANY_ADMIN';}/**\r\n   * Get user's company ID\r\n   */static getUserCompanyId(){const user=this.getStoredUser();return(user===null||user===void 0?void 0:user.companyId)||null;}/**\r\n   * Get user's department ID\r\n   */static getUserDepartmentId(){const user=this.getStoredUser();return(user===null||user===void 0?void 0:user.departmentId)||null;}}// Export default instance\nexport default AuthService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}