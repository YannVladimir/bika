{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from\"react\";import{authService}from\"../services/api\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// Check if user is already logged in\nconst currentUser=authService.getCurrentUser();if(currentUser&&authService.isAuthenticated()){setUser(currentUser);}setIsLoading(false);},[]);const login=async(email,password)=>{try{await authService.login({email,password});// Get the user from localStorage (where authService stored it)\nconst currentUser=authService.getCurrentUser();setUser(currentUser);}catch(error){throw error;}};const register=async userData=>{try{await authService.register(userData);// Get the user from localStorage (where authService stored it)\nconst currentUser=authService.getCurrentUser();setUser(currentUser);}catch(error){throw error;}};const logout=async()=>{try{await authService.logout();}finally{setUser(null);}};const value={user,isAuthenticated:!!user,isLoading,login,logout,register};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}