{"ast":null,"code":"import apiClient from './client';\nimport { userService } from './userService';\nclass AuthService {\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login', credentials);\n\n    // Store token\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n\n      // Fetch real user profile data\n      try {\n        const userProfile = await userService.getCurrentUserProfile();\n        localStorage.setItem('user', JSON.stringify(userProfile));\n      } catch (error) {\n        console.error('Failed to fetch user profile:', error);\n        // Fallback to basic user info from login response if needed\n      }\n    }\n    return response.data;\n  }\n  async register(userData) {\n    const response = await apiClient.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n\n      // Fetch real user profile data\n      try {\n        const userProfile = await userService.getCurrentUserProfile();\n        localStorage.setItem('user', JSON.stringify(userProfile));\n      } catch (error) {\n        console.error('Failed to fetch user profile:', error);\n        // Fallback to basic user info from registration if needed\n      }\n    }\n    return response.data;\n  }\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  }\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n\n  // Method to refresh user data from backend\n  async refreshUserData() {\n    try {\n      const userProfile = await userService.getCurrentUserProfile();\n      localStorage.setItem('user', JSON.stringify(userProfile));\n      return userProfile;\n    } catch (error) {\n      console.error('Failed to refresh user data:', error);\n      return null;\n    }\n  }\n}\nexport const authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["apiClient","userService","AuthService","login","credentials","response","post","data","token","localStorage","setItem","userProfile","getCurrentUserProfile","JSON","stringify","error","console","register","userData","logout","removeItem","getCurrentUser","userStr","getItem","parse","getToken","isAuthenticated","refreshUserData","authService"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/authService.ts"],"sourcesContent":["import apiClient from './client';\nimport { LoginRequest, LoginResponse, User } from './types';\nimport { userService } from './userService';\n\nclass AuthService {\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\n    const response = await apiClient.post<LoginResponse>('/auth/login', credentials);\n    \n    // Store token\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      \n      // Fetch real user profile data\n      try {\n        const userProfile = await userService.getCurrentUserProfile();\n        localStorage.setItem('user', JSON.stringify(userProfile));\n      } catch (error) {\n        console.error('Failed to fetch user profile:', error);\n        // Fallback to basic user info from login response if needed\n      }\n    }\n    \n    return response.data;\n  }\n\n  async register(userData: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    companyId: number;\n  }): Promise<LoginResponse> {\n    const response = await apiClient.post<LoginResponse>('/auth/register', userData);\n    \n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      \n      // Fetch real user profile data\n      try {\n        const userProfile = await userService.getCurrentUserProfile();\n        localStorage.setItem('user', JSON.stringify(userProfile));\n      } catch (error) {\n        console.error('Failed to fetch user profile:', error);\n        // Fallback to basic user info from registration if needed\n      }\n    }\n    \n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await apiClient.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  }\n\n  getCurrentUser(): User | null {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  // Method to refresh user data from backend\n  async refreshUserData(): Promise<User | null> {\n    try {\n      const userProfile = await userService.getCurrentUserProfile();\n      localStorage.setItem('user', JSON.stringify(userProfile));\n      return userProfile;\n    } catch (error) {\n      console.error('Failed to refresh user data:', error);\n      return null;\n    }\n  }\n}\n\nexport const authService = new AuthService();\nexport default authService; "],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAEhC,SAASC,WAAW,QAAQ,eAAe;AAE3C,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,WAAyB,EAA0B;IAC7D,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,IAAI,CAAgB,aAAa,EAAEF,WAAW,CAAC;;IAEhF;IACA,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;;MAElD;MACA,IAAI;QACF,MAAMG,WAAW,GAAG,MAAMV,WAAW,CAACW,qBAAqB,CAAC,CAAC;QAC7DH,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEG,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD;MACF;IACF;IAEA,OAAOV,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMU,QAAQA,CAACC,QAMd,EAA0B;IACzB,MAAMb,QAAQ,GAAG,MAAML,SAAS,CAACM,IAAI,CAAgB,gBAAgB,EAAEY,QAAQ,CAAC;IAEhF,IAAIb,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;;MAElD;MACA,IAAI;QACF,MAAMG,WAAW,GAAG,MAAMV,WAAW,CAACW,qBAAqB,CAAC,CAAC;QAC7DH,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEG,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD;MACF;IACF;IAEA,OAAOV,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMY,MAAMA,CAAA,EAAkB;IAC5B,IAAI;MACF,MAAMnB,SAAS,CAACM,IAAI,CAAC,cAAc,CAAC;IACtC,CAAC,SAAS;MACRG,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;MAChCX,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC;IACjC;EACF;EAEAC,cAAcA,CAAA,EAAgB;IAC5B,MAAMC,OAAO,GAAGb,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC;IAC5C,OAAOD,OAAO,GAAGT,IAAI,CAACW,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;EAC7C;EAEAG,QAAQA,CAAA,EAAkB;IACxB,OAAOhB,YAAY,CAACc,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAG,eAAeA,CAAA,EAAY;IACzB,OAAO,CAAC,CAAC,IAAI,CAACD,QAAQ,CAAC,CAAC;EAC1B;;EAEA;EACA,MAAME,eAAeA,CAAA,EAAyB;IAC5C,IAAI;MACF,MAAMhB,WAAW,GAAG,MAAMV,WAAW,CAACW,qBAAqB,CAAC,CAAC;MAC7DH,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEG,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC,CAAC;MACzD,OAAOA,WAAW;IACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,IAAI;IACb;EACF;AACF;AAEA,OAAO,MAAMa,WAAW,GAAG,IAAI1B,WAAW,CAAC,CAAC;AAC5C,eAAe0B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}