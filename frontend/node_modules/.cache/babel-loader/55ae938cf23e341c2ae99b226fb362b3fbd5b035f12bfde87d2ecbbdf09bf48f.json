{"ast":null,"code":"import apiClient from './client';\nclass FolderService {\n  constructor() {\n    this.basePath = '/v1/folders';\n  }\n  // Get root folders by company\n  async getRootFoldersByCompany(companyId) {\n    const response = await apiClient.get(`${this.basePath}/company/${companyId}/root`);\n    return response.data;\n  }\n\n  // Get folder by ID with contents\n  async getFolderContents(id) {\n    const response = await apiClient.get(`${this.basePath}/${id}/contents`);\n    return response.data;\n  }\n\n  // Get folder by ID\n  async getFolderById(id) {\n    const response = await apiClient.get(`${this.basePath}/${id}`);\n    return response.data;\n  }\n\n  // Create a new folder\n  async createFolder(folder) {\n    const response = await apiClient.post(this.basePath, folder);\n    return response.data;\n  }\n\n  // Delete folder\n  async deleteFolder(id) {\n    await apiClient.delete(`${this.basePath}/${id}`);\n  }\n\n  // Helper method to generate folder key from name\n  generateFolderKey(name) {\n    return name.toLowerCase().replace(/[^a-z0-9]/g, '_').replace(/_+/g, '_').replace(/^_|_$/g, '');\n  }\n\n  // Helper method to create new folder with defaults\n  createNewFolder(name, companyId, parentId, departmentId) {\n    return {\n      name,\n      companyId,\n      parentId,\n      departmentId,\n      description: ''\n    };\n  }\n}\nconst folderService = new FolderService();\nexport default folderService;","map":{"version":3,"names":["apiClient","FolderService","constructor","basePath","getRootFoldersByCompany","companyId","response","get","data","getFolderContents","id","getFolderById","createFolder","folder","post","deleteFolder","delete","generateFolderKey","name","toLowerCase","replace","createNewFolder","parentId","departmentId","description","folderService"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/folderService.ts"],"sourcesContent":["import apiClient from './client';\r\nimport { Folder, CreateFolderRequest, ApiResponse } from './types';\r\n\r\nclass FolderService {\r\n  private readonly basePath = '/v1/folders';\r\n\r\n  // Get root folders by company\r\n  async getRootFoldersByCompany(companyId: number): Promise<Folder[]> {\r\n    const response = await apiClient.get<Folder[]>(`${this.basePath}/company/${companyId}/root`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get folder by ID with contents\r\n  async getFolderContents(id: number): Promise<Folder> {\r\n    const response = await apiClient.get<Folder>(`${this.basePath}/${id}/contents`);\r\n    return response.data;\r\n  }\r\n\r\n  // Get folder by ID\r\n  async getFolderById(id: number): Promise<Folder> {\r\n    const response = await apiClient.get<Folder>(`${this.basePath}/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Create a new folder\r\n  async createFolder(folder: CreateFolderRequest): Promise<Folder> {\r\n    const response = await apiClient.post<Folder>(this.basePath, folder);\r\n    return response.data;\r\n  }\r\n\r\n  // Delete folder\r\n  async deleteFolder(id: number): Promise<void> {\r\n    await apiClient.delete(`${this.basePath}/${id}`);\r\n  }\r\n\r\n  // Helper method to generate folder key from name\r\n  generateFolderKey(name: string): string {\r\n    return name\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9]/g, '_')\r\n      .replace(/_+/g, '_')\r\n      .replace(/^_|_$/g, '');\r\n  }\r\n\r\n  // Helper method to create new folder with defaults\r\n  createNewFolder(name: string, companyId: number, parentId?: number, departmentId?: number): CreateFolderRequest {\r\n    return {\r\n      name,\r\n      companyId,\r\n      parentId,\r\n      departmentId,\r\n      description: '',\r\n    };\r\n  }\r\n}\r\n\r\nconst folderService = new FolderService();\r\nexport default folderService; "],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAGhC,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA,KACDC,QAAQ,GAAG,aAAa;EAAA;EAEzC;EACA,MAAMC,uBAAuBA,CAACC,SAAiB,EAAqB;IAClE,MAAMC,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAW,GAAG,IAAI,CAACJ,QAAQ,YAAYE,SAAS,OAAO,CAAC;IAC5F,OAAOC,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMC,iBAAiBA,CAACC,EAAU,EAAmB;IACnD,MAAMJ,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAS,GAAG,IAAI,CAACJ,QAAQ,IAAIO,EAAE,WAAW,CAAC;IAC/E,OAAOJ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMG,aAAaA,CAACD,EAAU,EAAmB;IAC/C,MAAMJ,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAS,GAAG,IAAI,CAACJ,QAAQ,IAAIO,EAAE,EAAE,CAAC;IACtE,OAAOJ,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMI,YAAYA,CAACC,MAA2B,EAAmB;IAC/D,MAAMP,QAAQ,GAAG,MAAMN,SAAS,CAACc,IAAI,CAAS,IAAI,CAACX,QAAQ,EAAEU,MAAM,CAAC;IACpE,OAAOP,QAAQ,CAACE,IAAI;EACtB;;EAEA;EACA,MAAMO,YAAYA,CAACL,EAAU,EAAiB;IAC5C,MAAMV,SAAS,CAACgB,MAAM,CAAC,GAAG,IAAI,CAACb,QAAQ,IAAIO,EAAE,EAAE,CAAC;EAClD;;EAEA;EACAO,iBAAiBA,CAACC,IAAY,EAAU;IACtC,OAAOA,IAAI,CACRC,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAC1BA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAC1B;;EAEA;EACAC,eAAeA,CAACH,IAAY,EAAEb,SAAiB,EAAEiB,QAAiB,EAAEC,YAAqB,EAAuB;IAC9G,OAAO;MACLL,IAAI;MACJb,SAAS;MACTiB,QAAQ;MACRC,YAAY;MACZC,WAAW,EAAE;IACf,CAAC;EACH;AACF;AAEA,MAAMC,aAAa,GAAG,IAAIxB,aAAa,CAAC,CAAC;AACzC,eAAewB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}