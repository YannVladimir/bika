{"ast":null,"code":"import apiClient from './client';\nclass AuthService {\n  constructor() {\n    this.TOKEN_KEY = 'token';\n    this.USER_KEY = 'user';\n    // Clear any existing tokens on initialization to prevent auth issues\n    this.clearStorage();\n  }\n  clearStorage() {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n  }\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login', credentials);\n\n    // Store the token and user data\n    localStorage.setItem(this.TOKEN_KEY, response.data.token);\n    localStorage.setItem(this.USER_KEY, JSON.stringify({\n      id: response.data.id,\n      email: response.data.email,\n      firstName: response.data.firstName,\n      lastName: response.data.lastName,\n      role: response.data.role,\n      companyId: response.data.companyId,\n      departmentId: response.data.departmentId\n    }));\n    return response.data;\n  }\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n    } catch (error) {\n      // Even if logout fails on server, clear local storage\n      console.warn('Logout request failed, but clearing local storage anyway');\n    } finally {\n      this.clearStorage();\n    }\n  }\n  getToken() {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n  getUser() {\n    const userStr = localStorage.getItem(this.USER_KEY);\n    return userStr ? JSON.parse(userStr) : null;\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n  async fetchUserProfile() {\n    const response = await apiClient.get('/v1/users/profile');\n\n    // Update stored user data with fresh profile data\n    const currentUser = this.getUser();\n    if (currentUser) {\n      const updatedUser = {\n        ...currentUser,\n        ...response.data\n      };\n      localStorage.setItem(this.USER_KEY, JSON.stringify(updatedUser));\n    }\n    return response.data;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["apiClient","AuthService","constructor","TOKEN_KEY","USER_KEY","clearStorage","localStorage","removeItem","login","credentials","response","post","setItem","data","token","JSON","stringify","id","email","firstName","lastName","role","companyId","departmentId","logout","error","console","warn","getToken","getItem","getUser","userStr","parse","isAuthenticated","fetchUserProfile","get","currentUser","updatedUser","authService"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/authService.ts"],"sourcesContent":["import apiClient from './client';\nimport { LoginRequest, LoginResponse, User } from './types';\n\nclass AuthService {\n  private readonly TOKEN_KEY = 'token';\n  private readonly USER_KEY = 'user';\n\n  constructor() {\n    // Clear any existing tokens on initialization to prevent auth issues\n    this.clearStorage();\n  }\n\n  private clearStorage(): void {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n  }\n\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\n    const response = await apiClient.post<LoginResponse>('/auth/login', credentials);\n    \n    // Store the token and user data\n    localStorage.setItem(this.TOKEN_KEY, response.data.token);\n    localStorage.setItem(this.USER_KEY, JSON.stringify({\n      id: response.data.id,\n      email: response.data.email,\n      firstName: response.data.firstName,\n      lastName: response.data.lastName,\n      role: response.data.role,\n      companyId: response.data.companyId,\n      departmentId: response.data.departmentId,\n    }));\n    \n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await apiClient.post('/auth/logout');\n    } catch (error) {\n      // Even if logout fails on server, clear local storage\n      console.warn('Logout request failed, but clearing local storage anyway');\n    } finally {\n      this.clearStorage();\n    }\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n\n  getUser(): User | null {\n    const userStr = localStorage.getItem(this.USER_KEY);\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  async fetchUserProfile(): Promise<User> {\n    const response = await apiClient.get<User>('/v1/users/profile');\n    \n    // Update stored user data with fresh profile data\n    const currentUser = this.getUser();\n    if (currentUser) {\n      const updatedUser = {\n        ...currentUser,\n        ...response.data\n      };\n      localStorage.setItem(this.USER_KEY, JSON.stringify(updatedUser));\n    }\n    \n    return response.data;\n  }\n}\n\nconst authService = new AuthService();\nexport default authService; "],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAGhC,MAAMC,WAAW,CAAC;EAIhBC,WAAWA,CAAA,EAAG;IAAA,KAHGC,SAAS,GAAG,OAAO;IAAA,KACnBC,QAAQ,GAAG,MAAM;IAGhC;IACA,IAAI,CAACC,YAAY,CAAC,CAAC;EACrB;EAEQA,YAAYA,CAAA,EAAS;IAC3BC,YAAY,CAACC,UAAU,CAAC,IAAI,CAACJ,SAAS,CAAC;IACvCG,YAAY,CAACC,UAAU,CAAC,IAAI,CAACH,QAAQ,CAAC;EACxC;EAEA,MAAMI,KAAKA,CAACC,WAAyB,EAA0B;IAC7D,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAACW,IAAI,CAAgB,aAAa,EAAEF,WAAW,CAAC;;IAEhF;IACAH,YAAY,CAACM,OAAO,CAAC,IAAI,CAACT,SAAS,EAAEO,QAAQ,CAACG,IAAI,CAACC,KAAK,CAAC;IACzDR,YAAY,CAACM,OAAO,CAAC,IAAI,CAACR,QAAQ,EAAEW,IAAI,CAACC,SAAS,CAAC;MACjDC,EAAE,EAAEP,QAAQ,CAACG,IAAI,CAACI,EAAE;MACpBC,KAAK,EAAER,QAAQ,CAACG,IAAI,CAACK,KAAK;MAC1BC,SAAS,EAAET,QAAQ,CAACG,IAAI,CAACM,SAAS;MAClCC,QAAQ,EAAEV,QAAQ,CAACG,IAAI,CAACO,QAAQ;MAChCC,IAAI,EAAEX,QAAQ,CAACG,IAAI,CAACQ,IAAI;MACxBC,SAAS,EAAEZ,QAAQ,CAACG,IAAI,CAACS,SAAS;MAClCC,YAAY,EAAEb,QAAQ,CAACG,IAAI,CAACU;IAC9B,CAAC,CAAC,CAAC;IAEH,OAAOb,QAAQ,CAACG,IAAI;EACtB;EAEA,MAAMW,MAAMA,CAAA,EAAkB;IAC5B,IAAI;MACF,MAAMxB,SAAS,CAACW,IAAI,CAAC,cAAc,CAAC;IACtC,CAAC,CAAC,OAAOc,KAAK,EAAE;MACd;MACAC,OAAO,CAACC,IAAI,CAAC,0DAA0D,CAAC;IAC1E,CAAC,SAAS;MACR,IAAI,CAACtB,YAAY,CAAC,CAAC;IACrB;EACF;EAEAuB,QAAQA,CAAA,EAAkB;IACxB,OAAOtB,YAAY,CAACuB,OAAO,CAAC,IAAI,CAAC1B,SAAS,CAAC;EAC7C;EAEA2B,OAAOA,CAAA,EAAgB;IACrB,MAAMC,OAAO,GAAGzB,YAAY,CAACuB,OAAO,CAAC,IAAI,CAACzB,QAAQ,CAAC;IACnD,OAAO2B,OAAO,GAAGhB,IAAI,CAACiB,KAAK,CAACD,OAAO,CAAC,GAAG,IAAI;EAC7C;EAEAE,eAAeA,CAAA,EAAY;IACzB,OAAO,CAAC,CAAC,IAAI,CAACL,QAAQ,CAAC,CAAC;EAC1B;EAEA,MAAMM,gBAAgBA,CAAA,EAAkB;IACtC,MAAMxB,QAAQ,GAAG,MAAMV,SAAS,CAACmC,GAAG,CAAO,mBAAmB,CAAC;;IAE/D;IACA,MAAMC,WAAW,GAAG,IAAI,CAACN,OAAO,CAAC,CAAC;IAClC,IAAIM,WAAW,EAAE;MACf,MAAMC,WAAW,GAAG;QAClB,GAAGD,WAAW;QACd,GAAG1B,QAAQ,CAACG;MACd,CAAC;MACDP,YAAY,CAACM,OAAO,CAAC,IAAI,CAACR,QAAQ,EAAEW,IAAI,CAACC,SAAS,CAACqB,WAAW,CAAC,CAAC;IAClE;IAEA,OAAO3B,QAAQ,CAACG,IAAI;EACtB;AACF;AAEA,MAAMyB,WAAW,GAAG,IAAIrC,WAAW,CAAC,CAAC;AACrC,eAAeqC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}