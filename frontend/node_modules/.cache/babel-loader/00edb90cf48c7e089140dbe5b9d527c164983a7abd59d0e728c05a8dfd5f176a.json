{"ast":null,"code":"import apiClient from './client';\n\n// Drive Types\n\nclass DriveService {\n  constructor() {\n    this.basePath = '/v1/drive';\n  }\n  // Storage Quota\n  async getStorageQuota() {\n    const response = await apiClient.get(`${this.basePath}/storage/quota`);\n    return response.data;\n  }\n\n  // Folder Operations\n  async getRootFolders() {\n    const response = await apiClient.get(`${this.basePath}/folders/root`);\n    return response.data;\n  }\n  async getFolderById(id) {\n    const response = await apiClient.get(`${this.basePath}/folders/${id}`);\n    return response.data;\n  }\n  async createFolder(request) {\n    const response = await apiClient.post(`${this.basePath}/folders`, request);\n    return response.data;\n  }\n  async updateFolder(id, request) {\n    const response = await apiClient.put(`${this.basePath}/folders/${id}`, request);\n    return response.data;\n  }\n  async deleteFolder(id) {\n    await apiClient.delete(`${this.basePath}/folders/${id}`);\n  }\n\n  // File Operations\n  async getAllFiles() {\n    const response = await apiClient.get(`${this.basePath}/files`);\n    return response.data;\n  }\n  async getFilesByFolder(folderId) {\n    const url = folderId ? `${this.basePath}/files/folder?folderId=${folderId}` : `${this.basePath}/files/folder`;\n    const response = await apiClient.get(url);\n    return response.data;\n  }\n  async getFileById(id) {\n    const response = await apiClient.get(`${this.basePath}/files/${id}`);\n    return response.data;\n  }\n  async uploadFile(request) {\n    const response = await apiClient.post(`${this.basePath}/files`, request);\n    return response.data;\n  }\n  async updateFile(id, request) {\n    const response = await apiClient.put(`${this.basePath}/files/${id}`, request);\n    return response.data;\n  }\n  async deleteFile(id) {\n    await apiClient.delete(`${this.basePath}/files/${id}`);\n  }\n  async downloadFile(id) {\n    const response = await apiClient.get(`${this.basePath}/files/${id}/download`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n  async getFilesByType(mimeType) {\n    const response = await apiClient.get(`${this.basePath}/files/type/${encodeURIComponent(mimeType)}`);\n    return response.data;\n  }\n\n  // Helper Methods\n  formatFileSize(bytes) {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n  getFileIcon(mimeType) {\n    if (!mimeType) return 'InsertDriveFile';\n    if (mimeType.startsWith('image/')) return 'Image';\n    if (mimeType.startsWith('video/')) return 'VideoFile';\n    if (mimeType.startsWith('audio/')) return 'AudioFile';\n    if (mimeType === 'application/pdf') return 'PictureAsPdf';\n    if (mimeType.includes('word') || mimeType.includes('document')) return 'Description';\n    if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'TableChart';\n    if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'Slideshow';\n    if (mimeType.startsWith('text/')) return 'TextSnippet';\n    if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('archive')) return 'Archive';\n    return 'InsertDriveFile';\n  }\n  getFileTypeColor(mimeType) {\n    if (!mimeType) return '#666';\n    if (mimeType.startsWith('image/')) return '#4CAF50';\n    if (mimeType.startsWith('video/')) return '#F44336';\n    if (mimeType.startsWith('audio/')) return '#9C27B0';\n    if (mimeType === 'application/pdf') return '#F44336';\n    if (mimeType.includes('word') || mimeType.includes('document')) return '#2196F3';\n    if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return '#4CAF50';\n    if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return '#FF9800';\n    if (mimeType.startsWith('text/')) return '#607D8B';\n    if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('archive')) return '#795548';\n    return '#666';\n  }\n  createFileFromBrowser(file, folderId) {\n    var _file$name$split$pop;\n    // Generate file extension\n    const extension = ((_file$name$split$pop = file.name.split('.').pop()) === null || _file$name$split$pop === void 0 ? void 0 : _file$name$split$pop.toLowerCase()) || '';\n    return {\n      name: file.name,\n      originalFilename: file.name,\n      filePath: `/drive/uploads/${file.name}`,\n      // This would be updated by actual file storage\n      fileSize: file.size,\n      mimeType: file.type || 'application/octet-stream',\n      fileExtension: extension,\n      folderId\n    };\n  }\n  isFileTypeSupported(mimeType) {\n    // Support common file types\n    const supportedTypes = [\n    // Documents\n    'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    // Text files\n    'text/plain', 'text/csv', 'application/json', 'application/xml',\n    // Images\n    'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml',\n    // Videos\n    'video/mp4', 'video/avi', 'video/mov', 'video/wmv', 'video/webm',\n    // Audio\n    'audio/mp3', 'audio/wav', 'audio/ogg', 'audio/flac',\n    // Archives\n    'application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed'];\n\n    // Also support any image/*, video/*, audio/*, text/* types\n    if (mimeType.startsWith('image/') || mimeType.startsWith('video/') || mimeType.startsWith('audio/') || mimeType.startsWith('text/')) {\n      return true;\n    }\n    return supportedTypes.includes(mimeType);\n  }\n}\nconst driveService = new DriveService();\nexport default driveService;","map":{"version":3,"names":["apiClient","DriveService","constructor","basePath","getStorageQuota","response","get","data","getRootFolders","getFolderById","id","createFolder","request","post","updateFolder","put","deleteFolder","delete","getAllFiles","getFilesByFolder","folderId","url","getFileById","uploadFile","updateFile","deleteFile","downloadFile","responseType","getFilesByType","mimeType","encodeURIComponent","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","getFileIcon","startsWith","includes","getFileTypeColor","createFileFromBrowser","file","_file$name$split$pop","extension","name","split","pop","toLowerCase","originalFilename","filePath","fileSize","size","type","fileExtension","isFileTypeSupported","supportedTypes","driveService"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/driveService.ts"],"sourcesContent":["import apiClient from './client';\r\n\r\n// Drive Types\r\nexport interface DriveFolder {\r\n  id: number;\r\n  name: string;\r\n  path: string;\r\n  description?: string;\r\n  parentId?: number;\r\n  companyId: number;\r\n  departmentId?: number;\r\n  userId: number;\r\n  children: DriveFolder[];\r\n  files: DriveFile[];\r\n  isActive: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  createdBy: string;\r\n}\r\n\r\nexport interface DriveFile {\r\n  id: number;\r\n  name: string;\r\n  originalFilename: string;\r\n  filePath: string;\r\n  fileSize: number;\r\n  mimeType: string;\r\n  fileExtension?: string;\r\n  folderId?: number;\r\n  folderName?: string;\r\n  companyId: number;\r\n  departmentId?: number;\r\n  userId: number;\r\n  isActive: boolean;\r\n  isDeleted: boolean;\r\n  downloadCount: number;\r\n  lastAccessed?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  createdBy: string;\r\n}\r\n\r\nexport interface UserStorageQuota {\r\n  id: number;\r\n  userId: number;\r\n  companyId: number;\r\n  maxStorageBytes: number;\r\n  usedStorageBytes: number;\r\n  usedStorageMB: number;\r\n  maxStorageMB: number;\r\n  usagePercentage: number;\r\n  availableBytes: number;\r\n  availableMB: number;\r\n}\r\n\r\nexport interface CreateDriveFolderRequest {\r\n  name: string;\r\n  description?: string;\r\n  parentId?: number;\r\n}\r\n\r\nexport interface CreateDriveFileRequest {\r\n  name: string;\r\n  originalFilename: string;\r\n  filePath: string;\r\n  fileSize: number;\r\n  mimeType: string;\r\n  fileExtension?: string;\r\n  folderId?: number;\r\n}\r\n\r\nclass DriveService {\r\n  private readonly basePath = '/v1/drive';\r\n\r\n  // Storage Quota\r\n  async getStorageQuota(): Promise<UserStorageQuota> {\r\n    const response = await apiClient.get<UserStorageQuota>(`${this.basePath}/storage/quota`);\r\n    return response.data;\r\n  }\r\n\r\n  // Folder Operations\r\n  async getRootFolders(): Promise<DriveFolder[]> {\r\n    const response = await apiClient.get<DriveFolder[]>(`${this.basePath}/folders/root`);\r\n    return response.data;\r\n  }\r\n\r\n  async getFolderById(id: number): Promise<DriveFolder> {\r\n    const response = await apiClient.get<DriveFolder>(`${this.basePath}/folders/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  async createFolder(request: CreateDriveFolderRequest): Promise<DriveFolder> {\r\n    const response = await apiClient.post<DriveFolder>(`${this.basePath}/folders`, request);\r\n    return response.data;\r\n  }\r\n\r\n  async updateFolder(id: number, request: CreateDriveFolderRequest): Promise<DriveFolder> {\r\n    const response = await apiClient.put<DriveFolder>(`${this.basePath}/folders/${id}`, request);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteFolder(id: number): Promise<void> {\r\n    await apiClient.delete(`${this.basePath}/folders/${id}`);\r\n  }\r\n\r\n  // File Operations\r\n  async getAllFiles(): Promise<DriveFile[]> {\r\n    const response = await apiClient.get<DriveFile[]>(`${this.basePath}/files`);\r\n    return response.data;\r\n  }\r\n\r\n  async getFilesByFolder(folderId?: number): Promise<DriveFile[]> {\r\n    const url = folderId \r\n      ? `${this.basePath}/files/folder?folderId=${folderId}`\r\n      : `${this.basePath}/files/folder`;\r\n    const response = await apiClient.get<DriveFile[]>(url);\r\n    return response.data;\r\n  }\r\n\r\n  async getFileById(id: number): Promise<DriveFile> {\r\n    const response = await apiClient.get<DriveFile>(`${this.basePath}/files/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  async uploadFile(request: CreateDriveFileRequest): Promise<DriveFile> {\r\n    const response = await apiClient.post<DriveFile>(`${this.basePath}/files`, request);\r\n    return response.data;\r\n  }\r\n\r\n  async updateFile(id: number, request: CreateDriveFileRequest): Promise<DriveFile> {\r\n    const response = await apiClient.put<DriveFile>(`${this.basePath}/files/${id}`, request);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteFile(id: number): Promise<void> {\r\n    await apiClient.delete(`${this.basePath}/files/${id}`);\r\n  }\r\n\r\n  async downloadFile(id: number): Promise<Blob> {\r\n    const response = await apiClient.get(`${this.basePath}/files/${id}/download`, {\r\n      responseType: 'blob'\r\n    });\r\n    return response.data;\r\n  }\r\n\r\n  async getFilesByType(mimeType: string): Promise<DriveFile[]> {\r\n    const response = await apiClient.get<DriveFile[]>(`${this.basePath}/files/type/${encodeURIComponent(mimeType)}`);\r\n    return response.data;\r\n  }\r\n\r\n  // Helper Methods\r\n  formatFileSize(bytes: number): string {\r\n    if (bytes === 0) return '0 B';\r\n    \r\n    const k = 1024;\r\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    \r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n\r\n  getFileIcon(mimeType: string): string {\r\n    if (!mimeType) return 'InsertDriveFile';\r\n    \r\n    if (mimeType.startsWith('image/')) return 'Image';\r\n    if (mimeType.startsWith('video/')) return 'VideoFile';\r\n    if (mimeType.startsWith('audio/')) return 'AudioFile';\r\n    if (mimeType === 'application/pdf') return 'PictureAsPdf';\r\n    if (mimeType.includes('word') || mimeType.includes('document')) return 'Description';\r\n    if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'TableChart';\r\n    if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'Slideshow';\r\n    if (mimeType.startsWith('text/')) return 'TextSnippet';\r\n    if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('archive')) return 'Archive';\r\n    \r\n    return 'InsertDriveFile';\r\n  }\r\n\r\n  getFileTypeColor(mimeType: string): string {\r\n    if (!mimeType) return '#666';\r\n    \r\n    if (mimeType.startsWith('image/')) return '#4CAF50';\r\n    if (mimeType.startsWith('video/')) return '#F44336';\r\n    if (mimeType.startsWith('audio/')) return '#9C27B0';\r\n    if (mimeType === 'application/pdf') return '#F44336';\r\n    if (mimeType.includes('word') || mimeType.includes('document')) return '#2196F3';\r\n    if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return '#4CAF50';\r\n    if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return '#FF9800';\r\n    if (mimeType.startsWith('text/')) return '#607D8B';\r\n    if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('archive')) return '#795548';\r\n    \r\n    return '#666';\r\n  }\r\n\r\n  createFileFromBrowser(file: File, folderId?: number): CreateDriveFileRequest {\r\n    // Generate file extension\r\n    const extension = file.name.split('.').pop()?.toLowerCase() || '';\r\n    \r\n    return {\r\n      name: file.name,\r\n      originalFilename: file.name,\r\n      filePath: `/drive/uploads/${file.name}`, // This would be updated by actual file storage\r\n      fileSize: file.size,\r\n      mimeType: file.type || 'application/octet-stream',\r\n      fileExtension: extension,\r\n      folderId\r\n    };\r\n  }\r\n\r\n  isFileTypeSupported(mimeType: string): boolean {\r\n    // Support common file types\r\n    const supportedTypes = [\r\n      // Documents\r\n      'application/pdf',\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      'application/vnd.ms-excel',\r\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n      'application/vnd.ms-powerpoint',\r\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n      \r\n      // Text files\r\n      'text/plain',\r\n      'text/csv',\r\n      'application/json',\r\n      'application/xml',\r\n      \r\n      // Images\r\n      'image/jpeg',\r\n      'image/png',\r\n      'image/gif',\r\n      'image/webp',\r\n      'image/svg+xml',\r\n      \r\n      // Videos\r\n      'video/mp4',\r\n      'video/avi',\r\n      'video/mov',\r\n      'video/wmv',\r\n      'video/webm',\r\n      \r\n      // Audio\r\n      'audio/mp3',\r\n      'audio/wav',\r\n      'audio/ogg',\r\n      'audio/flac',\r\n      \r\n      // Archives\r\n      'application/zip',\r\n      'application/x-rar-compressed',\r\n      'application/x-7z-compressed'\r\n    ];\r\n    \r\n    // Also support any image/*, video/*, audio/*, text/* types\r\n    if (mimeType.startsWith('image/') || \r\n        mimeType.startsWith('video/') || \r\n        mimeType.startsWith('audio/') || \r\n        mimeType.startsWith('text/')) {\r\n      return true;\r\n    }\r\n    \r\n    return supportedTypes.includes(mimeType);\r\n  }\r\n}\r\n\r\nconst driveService = new DriveService();\r\nexport default driveService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}