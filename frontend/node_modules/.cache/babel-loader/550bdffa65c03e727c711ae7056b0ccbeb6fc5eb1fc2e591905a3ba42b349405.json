{"ast":null,"code":"import apiClient from './client';\nexport const dashboardService = {\n  async getRoleBasedDashboardStats() {\n    try {\n      const response = await apiClient.get('/reports/dashboard/role-based');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch role-based dashboard stats:', error);\n      throw error;\n    }\n  },\n  async getRecentActivities() {\n    try {\n      // TODO: Implement when backend endpoint is available\n      // For now, return mock data\n      const mockActivities = [{\n        id: 1,\n        user: \"Current User\",\n        action: \"completed\",\n        document: \"Monthly Report Review\",\n        time: \"2 hours ago\",\n        type: \"task\"\n      }, {\n        id: 2,\n        user: \"Sarah Wilson\",\n        action: \"uploaded\",\n        document: \"Project Specifications.pdf\",\n        time: \"4 hours ago\",\n        type: \"document\"\n      }, {\n        id: 3,\n        user: \"Mike Chen\",\n        action: \"created\",\n        document: \"Q1 Marketing Campaign\",\n        time: \"6 hours ago\",\n        type: \"project\"\n      }];\n      return mockActivities;\n    } catch (error) {\n      console.error('Failed to fetch recent activities:', error);\n      throw error;\n    }\n  },\n  async refreshDashboard() {\n    try {\n      const [stats, activities] = await Promise.all([this.getRoleBasedDashboardStats(), this.getRecentActivities()]);\n      return {\n        stats,\n        activities\n      };\n    } catch (error) {\n      console.error('Failed to refresh dashboard:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["apiClient","dashboardService","getRoleBasedDashboardStats","response","get","data","error","console","getRecentActivities","mockActivities","id","user","action","document","time","type","refreshDashboard","stats","activities","Promise","all"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/dashboardService.ts"],"sourcesContent":["import apiClient from './client';\r\n\r\nexport interface DashboardStats {\r\n  // General stats\r\n  totalUsers?: number;\r\n  totalDocuments?: number;\r\n  totalTasks?: number;\r\n  totalProjects?: number;\r\n  totalCompanies?: number;\r\n  \r\n  // User activity stats\r\n  activeUsers?: number;\r\n  newUsersThisMonth?: number;\r\n  \r\n  // Task stats\r\n  pendingTasks?: number;\r\n  completedTasks?: number;\r\n  overdueTasks?: number;\r\n  tasksCompletedToday?: number;\r\n  \r\n  // Storage stats\r\n  storageUsedGB?: number;\r\n  storageTotalGB?: number;\r\n  documentsUploadedToday?: number;\r\n  \r\n  // User-specific stats\r\n  myTasks?: number;\r\n  myProjects?: number;\r\n  departmentTasks?: number;\r\n  companyTasks?: number;\r\n}\r\n\r\nexport interface RecentActivity {\r\n  id: number;\r\n  user: string;\r\n  action: string;\r\n  document: string;\r\n  time: string;\r\n  type: 'task' | 'document' | 'project' | 'company' | 'department';\r\n}\r\n\r\nexport const dashboardService = {\r\n  async getRoleBasedDashboardStats(): Promise<DashboardStats> {\r\n    try {\r\n      const response = await apiClient.get<DashboardStats>('/reports/dashboard/role-based');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch role-based dashboard stats:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getRecentActivities(): Promise<RecentActivity[]> {\r\n    try {\r\n      // TODO: Implement when backend endpoint is available\r\n      // For now, return mock data\r\n      const mockActivities: RecentActivity[] = [\r\n        {\r\n          id: 1,\r\n          user: \"Current User\",\r\n          action: \"completed\",\r\n          document: \"Monthly Report Review\",\r\n          time: \"2 hours ago\",\r\n          type: \"task\"\r\n        },\r\n        {\r\n          id: 2,\r\n          user: \"Sarah Wilson\",\r\n          action: \"uploaded\",\r\n          document: \"Project Specifications.pdf\",\r\n          time: \"4 hours ago\",\r\n          type: \"document\"\r\n        },\r\n        {\r\n          id: 3,\r\n          user: \"Mike Chen\",\r\n          action: \"created\",\r\n          document: \"Q1 Marketing Campaign\",\r\n          time: \"6 hours ago\",\r\n          type: \"project\"\r\n        },\r\n      ];\r\n      return mockActivities;\r\n    } catch (error) {\r\n      console.error('Failed to fetch recent activities:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async refreshDashboard(): Promise<{ stats: DashboardStats; activities: RecentActivity[] }> {\r\n    try {\r\n      const [stats, activities] = await Promise.all([\r\n        this.getRoleBasedDashboardStats(),\r\n        this.getRecentActivities()\r\n      ]);\r\n      \r\n      return { stats, activities };\r\n    } catch (error) {\r\n      console.error('Failed to refresh dashboard:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAyChC,OAAO,MAAMC,gBAAgB,GAAG;EAC9B,MAAMC,0BAA0BA,CAAA,EAA4B;IAC1D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAiB,+BAA+B,CAAC;MACrF,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAME,mBAAmBA,CAAA,EAA8B;IACrD,IAAI;MACF;MACA;MACA,MAAMC,cAAgC,GAAG,CACvC;QACEC,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,cAAc;QACpBC,MAAM,EAAE,WAAW;QACnBC,QAAQ,EAAE,uBAAuB;QACjCC,IAAI,EAAE,aAAa;QACnBC,IAAI,EAAE;MACR,CAAC,EACD;QACEL,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,cAAc;QACpBC,MAAM,EAAE,UAAU;QAClBC,QAAQ,EAAE,4BAA4B;QACtCC,IAAI,EAAE,aAAa;QACnBC,IAAI,EAAE;MACR,CAAC,EACD;QACEL,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,WAAW;QACjBC,MAAM,EAAE,SAAS;QACjBC,QAAQ,EAAE,uBAAuB;QACjCC,IAAI,EAAE,aAAa;QACnBC,IAAI,EAAE;MACR,CAAC,CACF;MACD,OAAON,cAAc;IACvB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMU,gBAAgBA,CAAA,EAAqE;IACzF,IAAI;MACF,MAAM,CAACC,KAAK,EAAEC,UAAU,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC5C,IAAI,CAAClB,0BAA0B,CAAC,CAAC,EACjC,IAAI,CAACM,mBAAmB,CAAC,CAAC,CAC3B,CAAC;MAEF,OAAO;QAAES,KAAK;QAAEC;MAAW,CAAC;IAC9B,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}