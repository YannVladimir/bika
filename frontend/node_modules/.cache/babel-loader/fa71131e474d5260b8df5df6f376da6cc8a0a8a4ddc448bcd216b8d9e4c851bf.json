{"ast":null,"code":"import apiClient from'./client';class AuthService{async login(credentials){const response=await apiClient.post('/auth/login',credentials);// Store token and user data\nif(response.data.token){localStorage.setItem('token',response.data.token);// Create user object from login response\nconst user={id:response.data.id,email:response.data.email,firstName:response.data.firstName,lastName:response.data.lastName,role:response.data.role,companyId:response.data.companyId,departmentId:response.data.departmentId};localStorage.setItem('user',JSON.stringify(user));}return response.data;}async register(userData){const response=await apiClient.post('/auth/register',userData);if(response.data.token){localStorage.setItem('token',response.data.token);// Create user object from register response\nconst user={id:response.data.id,email:response.data.email,firstName:response.data.firstName,lastName:response.data.lastName,role:response.data.role,companyId:response.data.companyId,departmentId:response.data.departmentId};localStorage.setItem('user',JSON.stringify(user));}return response.data;}async logout(){try{await apiClient.post('/auth/logout');}finally{localStorage.removeItem('token');localStorage.removeItem('user');}}getCurrentUser(){const userStr=localStorage.getItem('user');return userStr?JSON.parse(userStr):null;}getToken(){return localStorage.getItem('token');}isAuthenticated(){return!!this.getToken();}// Method to fetch fresh user profile from API\nasync fetchUserProfile(){const response=await apiClient.get('/users/profile');const user=response.data;localStorage.setItem('user',JSON.stringify(user));return user;}}const authService=new AuthService();export default authService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}