{"ast":null,"code":"import apiClient from './client';\nexport const passwordResetService = {\n  async requestPasswordReset(data) {\n    try {\n      const response = await apiClient.post('/auth/password/reset-request', data);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to request password reset:', error);\n      throw error;\n    }\n  },\n  async validateResetToken(token) {\n    try {\n      const response = await apiClient.get(`/auth/password/validate-token?token=${encodeURIComponent(token)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to validate reset token:', error);\n      throw error;\n    }\n  },\n  async resetPassword(data) {\n    try {\n      const response = await apiClient.post('/auth/password/reset', data);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to reset password:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["apiClient","passwordResetService","requestPasswordReset","data","response","post","error","console","validateResetToken","token","get","encodeURIComponent","resetPassword"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/passwordResetService.ts"],"sourcesContent":["import apiClient from './client';\r\n\r\nexport interface PasswordResetRequest {\r\n  email: string;\r\n}\r\n\r\nexport interface PasswordResetData {\r\n  token: string;\r\n  newPassword: string;\r\n  confirmPassword: string;\r\n}\r\n\r\nexport interface TokenValidationResponse {\r\n  valid: boolean;\r\n  email?: string;\r\n  message: string;\r\n}\r\n\r\nexport interface PasswordResetResponse {\r\n  message: string;\r\n  status: string;\r\n}\r\n\r\nexport const passwordResetService = {\r\n  async requestPasswordReset(data: PasswordResetRequest): Promise<PasswordResetResponse> {\r\n    try {\r\n      const response = await apiClient.post<PasswordResetResponse>('/auth/password/reset-request', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to request password reset:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async validateResetToken(token: string): Promise<TokenValidationResponse> {\r\n    try {\r\n      const response = await apiClient.get<TokenValidationResponse>(`/auth/password/validate-token?token=${encodeURIComponent(token)}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to validate reset token:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async resetPassword(data: PasswordResetData): Promise<PasswordResetResponse> {\r\n    try {\r\n      const response = await apiClient.post<PasswordResetResponse>('/auth/password/reset', data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to reset password:', error);\r\n      throw error;\r\n    }\r\n  },\r\n}; "],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAuBhC,OAAO,MAAMC,oBAAoB,GAAG;EAClC,MAAMC,oBAAoBA,CAACC,IAA0B,EAAkC;IACrF,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAwB,8BAA8B,EAAEF,IAAI,CAAC;MAClG,OAAOC,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAME,kBAAkBA,CAACC,KAAa,EAAoC;IACxE,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,SAAS,CAACU,GAAG,CAA0B,uCAAuCC,kBAAkB,CAACF,KAAK,CAAC,EAAE,CAAC;MACjI,OAAOL,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMM,aAAaA,CAACT,IAAuB,EAAkC;IAC3E,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAwB,sBAAsB,EAAEF,IAAI,CAAC;MAC1F,OAAOC,QAAQ,CAACD,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}