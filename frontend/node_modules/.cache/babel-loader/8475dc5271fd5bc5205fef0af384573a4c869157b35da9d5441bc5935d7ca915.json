{"ast":null,"code":"import apiClient from './client';\nclass AuthService {\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login', credentials);\n\n    // Store token\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      // For now, create a mock user until we have a user info endpoint\n      const mockUser = {\n        id: 1,\n        email: credentials.email,\n        firstName: 'Super',\n        lastName: 'Admin',\n        role: 'ADMIN',\n        // Changed to ADMIN for backend compatibility\n        companyId: 1\n      };\n      localStorage.setItem('user', JSON.stringify(mockUser));\n    }\n    return response.data;\n  }\n  async register(userData) {\n    const response = await apiClient.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      const mockUser = {\n        id: 1,\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        role: 'USER',\n        companyId: userData.companyId\n      };\n      localStorage.setItem('user', JSON.stringify(mockUser));\n    }\n    return response.data;\n  }\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  }\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["apiClient","AuthService","login","credentials","response","post","data","token","localStorage","setItem","mockUser","id","email","firstName","lastName","role","companyId","JSON","stringify","register","userData","logout","removeItem","getCurrentUser","userStr","getItem","parse","getToken","isAuthenticated","authService"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/authService.ts"],"sourcesContent":["import apiClient from './client';\r\nimport { LoginRequest, LoginResponse, User } from './types';\r\n\r\nclass AuthService {\r\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\r\n    const response = await apiClient.post<LoginResponse>('/auth/login', credentials);\r\n    \r\n    // Store token\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      // For now, create a mock user until we have a user info endpoint\r\n      const mockUser: User = {\r\n        id: 1,\r\n        email: credentials.email,\r\n        firstName: 'Super',\r\n        lastName: 'Admin',\r\n        role: 'ADMIN', // Changed to ADMIN for backend compatibility\r\n        companyId: 1,\r\n      };\r\n      localStorage.setItem('user', JSON.stringify(mockUser));\r\n    }\r\n    \r\n    return response.data;\r\n  }\r\n\r\n  async register(userData: {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    companyId: number;\r\n  }): Promise<LoginResponse> {\r\n    const response = await apiClient.post<LoginResponse>('/auth/register', userData);\r\n    \r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      const mockUser: User = {\r\n        id: 1,\r\n        email: userData.email,\r\n        firstName: userData.firstName,\r\n        lastName: userData.lastName,\r\n        role: 'USER',\r\n        companyId: userData.companyId,\r\n      };\r\n      localStorage.setItem('user', JSON.stringify(mockUser));\r\n    }\r\n    \r\n    return response.data;\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    try {\r\n      await apiClient.post('/auth/logout');\r\n    } finally {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n    }\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    const userStr = localStorage.getItem('user');\r\n    return userStr ? JSON.parse(userStr) : null;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n}\r\n\r\nconst authService = new AuthService();\r\nexport default authService; "],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAGhC,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,WAAyB,EAA0B;IAC7D,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAgB,aAAa,EAAEF,WAAW,CAAC;;IAEhF;IACA,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClD;MACA,MAAMG,QAAc,GAAG;QACrBC,EAAE,EAAE,CAAC;QACLC,KAAK,EAAET,WAAW,CAACS,KAAK;QACxBC,SAAS,EAAE,OAAO;QAClBC,QAAQ,EAAE,OAAO;QACjBC,IAAI,EAAE,OAAO;QAAE;QACfC,SAAS,EAAE;MACb,CAAC;MACDR,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEQ,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,CAAC;IACxD;IAEA,OAAON,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMa,QAAQA,CAACC,QAMd,EAA0B;IACzB,MAAMhB,QAAQ,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAgB,gBAAgB,EAAEe,QAAQ,CAAC;IAEhF,IAAIhB,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClD,MAAMG,QAAc,GAAG;QACrBC,EAAE,EAAE,CAAC;QACLC,KAAK,EAAEQ,QAAQ,CAACR,KAAK;QACrBC,SAAS,EAAEO,QAAQ,CAACP,SAAS;QAC7BC,QAAQ,EAAEM,QAAQ,CAACN,QAAQ;QAC3BC,IAAI,EAAE,MAAM;QACZC,SAAS,EAAEI,QAAQ,CAACJ;MACtB,CAAC;MACDR,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEQ,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,CAAC;IACxD;IAEA,OAAON,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMe,MAAMA,CAAA,EAAkB;IAC5B,IAAI;MACF,MAAMrB,SAAS,CAACK,IAAI,CAAC,cAAc,CAAC;IACtC,CAAC,SAAS;MACRG,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;MAChCd,YAAY,CAACc,UAAU,CAAC,MAAM,CAAC;IACjC;EACF;EAEAC,cAAcA,CAAA,EAAgB;IAC5B,MAAMC,OAAO,GAAGhB,YAAY,CAACiB,OAAO,CAAC,MAAM,CAAC;IAC5C,OAAOD,OAAO,GAAGP,IAAI,CAACS,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;EAC7C;EAEAG,QAAQA,CAAA,EAAkB;IACxB,OAAOnB,YAAY,CAACiB,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAG,eAAeA,CAAA,EAAY;IACzB,OAAO,CAAC,CAAC,IAAI,CAACD,QAAQ,CAAC,CAAC;EAC1B;AACF;AAEA,MAAME,WAAW,GAAG,IAAI5B,WAAW,CAAC,CAAC;AACrC,eAAe4B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}