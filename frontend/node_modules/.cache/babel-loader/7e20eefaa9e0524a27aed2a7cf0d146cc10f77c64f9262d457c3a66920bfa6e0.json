{"ast":null,"code":"// Common API Response types\n\n// Error types\n\n// Auth types\n\n// User types - Enhanced to match backend\n\nexport let UserRole = /*#__PURE__*/function (UserRole) {\n  UserRole[\"SUPER_ADMIN\"] = \"SUPER_ADMIN\";\n  UserRole[\"COMPANY_ADMIN\"] = \"COMPANY_ADMIN\";\n  UserRole[\"MANAGER\"] = \"MANAGER\";\n  UserRole[\"USER\"] = \"USER\";\n  return UserRole;\n}({});\n\n// Department types\n\n// Company types\n\n// Document types\n\n// Field types for document type fields\n\n// Document field interface","map":{"version":3,"names":["UserRole"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/types.ts"],"sourcesContent":["// Common API Response types\nexport interface ApiResponse<T> {\n  data: T;\n  message?: string;\n  success: boolean;\n}\n\nexport interface PaginatedResponse<T> {\n  content: T[];\n  totalElements: number;\n  totalPages: number;\n  size: number;\n  number: number;\n  first: boolean;\n  last: boolean;\n}\n\n// Error types\nexport interface ApiError {\n  message: string;\n  status: number;\n  timestamp: string;\n  path: string;\n}\n\n// Auth types\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  token: string;\n  email: string;\n  role: UserRole;\n  id: number;\n  firstName: string;\n  lastName: string;\n  companyId: number;\n  departmentId?: number;\n}\n\nexport interface RegisterResponse {\n  token: string;\n  email: string;\n  role: UserRole;\n  id: number;\n  firstName: string;\n  lastName: string;\n  companyId: number;\n  departmentId?: number;\n}\n\n// User types - Enhanced to match backend\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: UserRole;\n  companyId: number;\n  departmentId?: number;\n  active: boolean;\n  lastLogin?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport enum UserRole {\n  SUPER_ADMIN = 'SUPER_ADMIN',\n  COMPANY_ADMIN = 'COMPANY_ADMIN',\n  MANAGER = 'MANAGER',\n  USER = 'USER'\n}\n\nexport interface CreateUserRequest {\n  username: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  companyId: number;\n  departmentId?: number;\n  role: UserRole;\n}\n\n// Department types\nexport interface Department {\n  id: number;\n  name: string;\n  code: string;\n  description?: string;\n  companyId: number;\n  parentId?: number;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Company types\nexport interface Company {\n  id: number;\n  name: string;\n  code: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  description?: string;\n  isActive: boolean;\n}\n\nexport interface CreateCompanyRequest {\n  name: string;\n  code: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  description?: string;\n  isActive: boolean;\n}\n\n// Document types\n\n// Field types for document type fields\nexport type FieldType = 'TEXT' | 'TEXTAREA' | 'NUMBER' | 'DATE' | 'SELECT' | 'CHECKBOX' | 'EMAIL' | 'PHONE' | 'URL';\n\n// Document field interface\nexport interface DocumentField {\n  id?: number;\n  name: string;\n  fieldKey: string;\n  fieldType: FieldType;\n  required: boolean;\n  description?: string;\n  defaultValue?: string;\n  validationRules?: string;\n  options?: string[];\n  displayOrder?: number;\n  active: boolean;\n}\n\nexport interface Document {\n  id: number;\n  name: string;\n  type: string;\n  size: number;\n  createdAt: string;\n  updatedAt: string;\n  folderId?: number;\n  documentTypeId: number;\n}\n\nexport interface DocumentType {\n  id?: number;\n  name: string;\n  code: string;\n  description?: string;\n  companyId: number;\n  fields: DocumentField[];\n  isActive: boolean;\n} "],"mappings":"AAAA;;AAiBA;;AAQA;;AA4BA;;AAgBA,WAAYA,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;;AAkBpB;;AAaA;;AAsBA;;AAEA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}