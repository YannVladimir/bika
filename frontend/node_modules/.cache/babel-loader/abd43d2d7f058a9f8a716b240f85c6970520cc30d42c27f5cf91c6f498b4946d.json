{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\bika\\\\bika\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { authService } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const currentUser = authService.getUser();\n    if (currentUser && authService.isAuthenticated()) {\n      setUser(currentUser);\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await authService.login({\n        email,\n        password\n      });\n      const userData = {\n        id: response.id,\n        email: response.email,\n        username: response.email,\n        // Use email as username if not provided\n        firstName: response.firstName,\n        lastName: response.lastName,\n        role: response.role,\n        companyId: response.companyId,\n        departmentId: response.departmentId,\n        active: true,\n        // Assume user is active if they can log in\n        createdAt: new Date().toISOString(),\n        // Default to current time\n        updatedAt: new Date().toISOString() // Default to current time\n      };\n      setUser(userData);\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      throw error;\n    } finally {\n      setUser(null);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","currentUser","getUser","isAuthenticated","login","email","password","response","userData","id","username","firstName","lastName","role","companyId","departmentId","active","createdAt","Date","toISOString","updatedAt","error","console","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode,\n} from \"react\";\nimport { authService, User } from \"../services/api\";\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const currentUser = authService.getUser();\n    if (currentUser && authService.isAuthenticated()) {\n      setUser(currentUser);\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await authService.login({ email, password });\n      const userData: User = {\n        id: response.id,\n        email: response.email,\n        username: response.email, // Use email as username if not provided\n        firstName: response.firstName,\n        lastName: response.lastName,\n        role: response.role,\n        companyId: response.companyId,\n        departmentId: response.departmentId,\n        active: true, // Assume user is active if they can log in\n        createdAt: new Date().toISOString(), // Default to current time\n        updatedAt: new Date().toISOString(), // Default to current time\n      };\n      setUser(userData);\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error(\"Logout failed:\", error);\n      throw error;\n    } finally {\n      setUser(null);\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    logout,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}