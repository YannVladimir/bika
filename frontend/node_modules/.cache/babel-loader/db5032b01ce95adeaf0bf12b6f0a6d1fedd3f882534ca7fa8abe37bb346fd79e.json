{"ast":null,"code":"import apiClient from './client';\nclass AuthService {\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login', credentials);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  }\n  async register(userData) {\n    const response = await apiClient.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  }\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  }\n  async getProfile() {\n    const response = await apiClient.get('/users/profile');\n    return response.data;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["apiClient","AuthService","login","credentials","response","post","data","token","localStorage","setItem","register","userData","logout","removeItem","getProfile","get","getToken","getItem","isAuthenticated","authService"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/authService.ts"],"sourcesContent":["import apiClient from './client';\r\nimport { LoginRequest, LoginResponse, User } from './types';\r\n\r\nclass AuthService {\r\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\r\n    const response = await apiClient.post<LoginResponse>('/auth/login', credentials);\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  }\r\n\r\n  async register(userData: {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    companyId: number;\r\n  }): Promise<LoginResponse> {\r\n    const response = await apiClient.post<LoginResponse>('/auth/register', userData);\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n    }\r\n    return response.data;\r\n  }\r\n\r\n  async logout(): Promise<void> {\r\n    try {\r\n      await apiClient.post('/auth/logout');\r\n    } finally {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n    }\r\n  }\r\n\r\n  async getProfile(): Promise<User> {\r\n    const response = await apiClient.get<User>('/users/profile');\r\n    return response.data;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n}\r\n\r\nconst authService = new AuthService();\r\nexport default authService; "],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;AAGhC,MAAMC,WAAW,CAAC;EAChB,MAAMC,KAAKA,CAACC,WAAyB,EAA0B;IAC7D,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAgB,aAAa,EAAEF,WAAW,CAAC;IAChF,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IACpD;IACA,OAAOH,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMI,QAAQA,CAACC,QAMd,EAA0B;IACzB,MAAMP,QAAQ,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAgB,gBAAgB,EAAEM,QAAQ,CAAC;IAChF,IAAIP,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;IACpD;IACA,OAAOH,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMM,MAAMA,CAAA,EAAkB;IAC5B,IAAI;MACF,MAAMZ,SAAS,CAACK,IAAI,CAAC,cAAc,CAAC;IACtC,CAAC,SAAS;MACRG,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;MAChCL,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;IACjC;EACF;EAEA,MAAMC,UAAUA,CAAA,EAAkB;IAChC,MAAMV,QAAQ,GAAG,MAAMJ,SAAS,CAACe,GAAG,CAAO,gBAAgB,CAAC;IAC5D,OAAOX,QAAQ,CAACE,IAAI;EACtB;EAEAU,QAAQA,CAAA,EAAkB;IACxB,OAAOR,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,eAAeA,CAAA,EAAY;IACzB,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,CAAC,CAAC;EAC1B;AACF;AAEA,MAAMG,WAAW,GAAG,IAAIlB,WAAW,CAAC,CAAC;AACrC,eAAekB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}