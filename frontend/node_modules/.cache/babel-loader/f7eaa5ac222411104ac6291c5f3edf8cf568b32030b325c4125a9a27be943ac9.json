{"ast":null,"code":"import apiClient from './client';\nclass AuthService {\n  async login(credentials) {\n    const response = await apiClient.post('/auth/login', credentials);\n\n    // Store token and user data\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n\n      // Create user object from login response\n      const user = {\n        id: response.data.id,\n        email: response.data.email,\n        firstName: response.data.firstName,\n        lastName: response.data.lastName,\n        role: response.data.role,\n        companyId: response.data.companyId,\n        departmentId: response.data.departmentId\n      };\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    return response.data;\n  }\n  async register(userData) {\n    const response = await apiClient.post('/auth/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n\n      // Create user object from register response\n      const user = {\n        id: response.data.id,\n        email: response.data.email,\n        firstName: response.data.firstName,\n        lastName: response.data.lastName,\n        role: response.data.role,\n        companyId: response.data.companyId,\n        departmentId: response.data.departmentId\n      };\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    return response.data;\n  }\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  }\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n\n  // Method to fetch fresh user profile from API\n  async fetchUserProfile() {\n    const response = await apiClient.get('/users/profile');\n    const user = response.data;\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["apiClient","AuthService","login","credentials","response","post","data","token","localStorage","setItem","user","id","email","firstName","lastName","role","companyId","departmentId","JSON","stringify","register","userData","logout","removeItem","getCurrentUser","userStr","getItem","parse","getToken","isAuthenticated","fetchUserProfile","get","authService"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/authService.ts"],"sourcesContent":["import apiClient from './client';\nimport { LoginRequest, LoginResponse, RegisterResponse, User } from './types';\n\nclass AuthService {\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\n    const response = await apiClient.post<LoginResponse>('/auth/login', credentials);\n    \n    // Store token and user data\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      \n      // Create user object from login response\n      const user: User = {\n        id: response.data.id,\n        email: response.data.email,\n        firstName: response.data.firstName,\n        lastName: response.data.lastName,\n        role: response.data.role,\n        companyId: response.data.companyId,\n        departmentId: response.data.departmentId,\n      };\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    \n    return response.data;\n  }\n\n  async register(userData: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    companyId: number;\n  }): Promise<RegisterResponse> {\n    const response = await apiClient.post<RegisterResponse>('/auth/register', userData);\n    \n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      \n      // Create user object from register response\n      const user: User = {\n        id: response.data.id,\n        email: response.data.email,\n        firstName: response.data.firstName,\n        lastName: response.data.lastName,\n        role: response.data.role,\n        companyId: response.data.companyId,\n        departmentId: response.data.departmentId,\n      };\n      localStorage.setItem('user', JSON.stringify(user));\n    }\n    \n    return response.data;\n  }\n\n  async logout(): Promise<void> {\n    try {\n      await apiClient.post('/auth/logout');\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    }\n  }\n\n  getCurrentUser(): User | null {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  // Method to fetch fresh user profile from API\n  async fetchUserProfile(): Promise<User> {\n    const response = await apiClient.get<User>('/users/profile');\n    const user = response.data;\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  }\n}\n\nconst authService = new AuthService();\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}