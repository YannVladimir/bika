{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\bika\\\\bika\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { authService } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const currentUser = authService.getCurrentUser();\n    setUser(currentUser);\n    setIsLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setIsLoading(true);\n    try {\n      await authService.login({\n        email,\n        password\n      });\n      const currentUser = authService.getCurrentUser();\n      setUser(currentUser);\n    } catch (error) {\n      setUser(null);\n      setIsLoading(false);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async userData => {\n    setIsLoading(true);\n    try {\n      await authService.register(userData);\n      const currentUser = authService.getCurrentUser();\n      setUser(currentUser);\n    } catch (error) {\n      setUser(null);\n      setIsLoading(false);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } finally {\n      setUser(null);\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    login,\n    logout,\n    register\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authService","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","currentUser","getCurrentUser","login","email","password","error","register","userData","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  ReactNode,\r\n} from \"react\";\r\nimport { authService, User } from \"../services/api\";\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  register: (userData: {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    companyId: number;\r\n  }) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const currentUser = authService.getCurrentUser();\r\n    setUser(currentUser);\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    setIsLoading(true);\r\n    try {\r\n      await authService.login({ email, password });\r\n      const currentUser = authService.getCurrentUser();\r\n      setUser(currentUser);\r\n    } catch (error) {\r\n      setUser(null);\r\n      setIsLoading(false);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData: {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    companyId: number;\r\n  }) => {\r\n    setIsLoading(true);\r\n    try {\r\n      await authService.register(userData);\r\n      const currentUser = authService.getCurrentUser();\r\n      setUser(currentUser);\r\n    } catch (error) {\r\n      setUser(null);\r\n      setIsLoading(false);\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await authService.logout();\r\n    } finally {\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    isLoading,\r\n    login,\r\n    logout,\r\n    register,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}