{"ast":null,"code":"import _objectSpread from\"C:/Users/Yann/Desktop/biakasystem/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState}from\"react\";import{Snackbar,Alert,Slide}from\"@mui/material\";// Notification types\n// Notification context interface\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// Slide transition component\nfunction SlideTransition(props){return/*#__PURE__*/_jsx(Slide,_objectSpread(_objectSpread({},props),{},{direction:\"up\"}));}// Create context\nconst NotificationContext=/*#__PURE__*/createContext(undefined);// Notification Provider Props\n// Notification Provider Component\nexport const NotificationProvider=_ref=>{let{children}=_ref;const[notification,setNotification]=useState(null);// Generate unique ID for notifications\nconst generateId=()=>{return Date.now().toString(36)+Math.random().toString(36).substr(2);};// Show notification function\nconst showNotification=function(message){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"info\";let autoHideDuration=arguments.length>2&&arguments[2]!==undefined?arguments[2]:6000;let action=arguments.length>3?arguments[3]:undefined;const newNotification={id:generateId(),message,type,autoHideDuration,action};setNotification(newNotification);};// Convenience methods\nconst showSuccess=function(message){let autoHideDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4000;showNotification(message,\"success\",autoHideDuration);};const showError=function(message){let autoHideDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:8000;showNotification(message,\"error\",autoHideDuration);};const showWarning=function(message){let autoHideDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:6000;showNotification(message,\"warning\",autoHideDuration);};const showInfo=function(message){let autoHideDuration=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5000;showNotification(message,\"info\",autoHideDuration);};// Hide notification\nconst hideNotification=()=>{setNotification(null);};// Handle Snackbar close\nconst handleClose=(event,reason)=>{if(reason===\"clickaway\"){return;}hideNotification();};// Context value\nconst contextValue={showNotification,showSuccess,showError,showWarning,showInfo,hideNotification};return/*#__PURE__*/_jsxs(NotificationContext.Provider,{value:contextValue,children:[children,/*#__PURE__*/_jsx(Snackbar,{open:notification!==null,autoHideDuration:(notification===null||notification===void 0?void 0:notification.autoHideDuration)||6000,onClose:handleClose,TransitionComponent:SlideTransition,anchorOrigin:{vertical:\"bottom\",horizontal:\"right\"},children:/*#__PURE__*/_jsx(Alert,{onClose:handleClose,severity:(notification===null||notification===void 0?void 0:notification.type)||\"info\",variant:\"filled\",action:notification===null||notification===void 0?void 0:notification.action,sx:{width:\"100%\",minWidth:300,maxWidth:500},children:notification===null||notification===void 0?void 0:notification.message})},notification===null||notification===void 0?void 0:notification.id)]});};// Custom hook to use notification context\nexport const useNotification=()=>{const context=useContext(NotificationContext);if(context===undefined){throw new Error(\"useNotification must be used within a NotificationProvider\");}return context;};// Export default\nexport default NotificationContext;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}