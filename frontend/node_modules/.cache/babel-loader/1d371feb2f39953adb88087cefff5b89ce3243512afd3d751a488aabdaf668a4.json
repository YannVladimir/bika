{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from\"react\";import{authService}from\"../services/api\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{// Check if user is already logged in\nconst currentUser=authService.getUser();if(currentUser&&authService.isAuthenticated()){setUser(currentUser);}setIsLoading(false);},[]);const login=async(email,password)=>{try{const response=await authService.login({email,password});const userData={id:response.id,email:response.email,firstName:response.firstName,lastName:response.lastName,role:response.role,companyId:response.companyId,departmentId:response.departmentId};setUser(userData);}catch(error){console.error(\"Login failed:\",error);throw error;}};const logout=async()=>{try{await authService.logout();}catch(error){console.error(\"Logout failed:\",error);throw error;}finally{setUser(null);}};const value={user,isAuthenticated:!!user,isLoading,login,logout};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}