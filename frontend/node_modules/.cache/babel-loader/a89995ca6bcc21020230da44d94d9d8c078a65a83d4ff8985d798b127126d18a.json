{"ast":null,"code":"import _objectSpread from\"C:/Users/Yann/Desktop/biakasystem/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios from'axios';// API Configuration\nconst API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://localhost:8080';// API Response Types\n// Create axios instance\nconst apiClient=axios.create({baseURL:API_BASE_URL,timeout:30000,headers:{'Content-Type':'application/json','Accept':'application/json'}});// Request interceptor - Add auth token to requests\napiClient.interceptors.request.use(config=>{const token=localStorage.getItem('access_token');if(token&&config.headers){config.headers.Authorization=\"Bearer \".concat(token);}// Log request in development\nif(process.env.NODE_ENV==='development'){var _config$method;console.log(\"\\uD83D\\uDE80 API Request: \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" \").concat(config.url),{data:config.data,params:config.params});}return config;},error=>{console.error('ðŸš¨ Request interceptor error:',error);return Promise.reject(error);});// Response interceptor - Handle responses and errors globally\napiClient.interceptors.response.use(response=>{// Log response in development\nif(process.env.NODE_ENV==='development'){var _response$config$meth;console.log(\"\\u2705 API Response: \".concat((_response$config$meth=response.config.method)===null||_response$config$meth===void 0?void 0:_response$config$meth.toUpperCase(),\" \").concat(response.config.url),{status:response.status,data:response.data});}return response;},error=>{// Log error in development\nif(process.env.NODE_ENV==='development'){var _error$config,_error$config$method,_error$config2,_error$response,_error$response2;console.error(\"\\u274C API Error: \".concat((_error$config=error.config)===null||_error$config===void 0?void 0:(_error$config$method=_error$config.method)===null||_error$config$method===void 0?void 0:_error$config$method.toUpperCase(),\" \").concat((_error$config2=error.config)===null||_error$config2===void 0?void 0:_error$config2.url),{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,data:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data});}// Handle different error scenarios\nif(error.response){var _error$config3;const{status,data}=error.response;// Handle authentication errors\nif(status===401){// Clear stored token\nlocalStorage.removeItem('access_token');localStorage.removeItem('refresh_token');localStorage.removeItem('user_data');// Redirect to login if not already there\nif(window.location.pathname!=='/login'){window.location.href='/login';}}// Handle forbidden access\nif(status===403){console.error('Access forbidden - insufficient permissions');}// Handle server errors\nif(status>=500){console.error('Server error occurred');}// Return formatted error\nreturn Promise.reject({message:(data===null||data===void 0?void 0:data.message)||'An error occurred',status,timestamp:(data===null||data===void 0?void 0:data.timestamp)||new Date().toISOString(),path:(data===null||data===void 0?void 0:data.path)||((_error$config3=error.config)===null||_error$config3===void 0?void 0:_error$config3.url)||'',errors:(data===null||data===void 0?void 0:data.errors)||{}});}// Handle network errors\nif(error.request){var _error$config4;return Promise.reject({message:'Network error - please check your connection',status:0,timestamp:new Date().toISOString(),path:((_error$config4=error.config)===null||_error$config4===void 0?void 0:_error$config4.url)||'',errors:{}});}// Handle other errors\nreturn Promise.reject({message:error.message||'An unexpected error occurred',status:0,timestamp:new Date().toISOString(),path:'',errors:{}});});// Generic API methods\nexport const api={// GET request\nget:(url,config)=>{return apiClient.get(url,config).then(response=>response.data);},// POST request\npost:(url,data,config)=>{return apiClient.post(url,data,config).then(response=>response.data);},// PUT request\nput:(url,data,config)=>{return apiClient.put(url,data,config).then(response=>response.data);},// DELETE request\ndelete:(url,config)=>{return apiClient.delete(url,config).then(response=>response.data);},// PATCH request\npatch:(url,data,config)=>{return apiClient.patch(url,data,config).then(response=>response.data);},// File upload\nupload:(url,formData,config)=>{return apiClient.post(url,formData,_objectSpread(_objectSpread({},config),{},{headers:_objectSpread(_objectSpread({},config===null||config===void 0?void 0:config.headers),{},{'Content-Type':'multipart/form-data'})})).then(response=>response.data);},// File download\ndownload:(url,filename,config)=>{return apiClient.get(url,_objectSpread(_objectSpread({},config),{},{responseType:'blob'})).then(response=>{const blob=new Blob([response.data]);const downloadUrl=window.URL.createObjectURL(blob);const link=document.createElement('a');link.href=downloadUrl;link.download=filename||'download';document.body.appendChild(link);link.click();document.body.removeChild(link);window.URL.revokeObjectURL(downloadUrl);});}};// Export the axios instance for direct access if needed\nexport default apiClient;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}