{"ast":null,"code":"import _objectSpread from\"C:/Users/Administrator/Desktop/bika/bika/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import apiClient from'./client';class AuthService{constructor(){this.TOKEN_KEY='token';this.USER_KEY='user';}// Remove the constructor that was clearing storage on initialization\n// constructor() {\n//   // Clear any existing tokens on initialization to prevent auth issues\n//   this.clearStorage();\n// }\nclearStorage(){localStorage.removeItem(this.TOKEN_KEY);localStorage.removeItem(this.USER_KEY);}async login(credentials){const response=await apiClient.post('/auth/login',credentials);// Store the token and user data\nlocalStorage.setItem(this.TOKEN_KEY,response.data.token);localStorage.setItem(this.USER_KEY,JSON.stringify({id:response.data.id,email:response.data.email,firstName:response.data.firstName,lastName:response.data.lastName,role:response.data.role,companyId:response.data.companyId,departmentId:response.data.departmentId}));return response.data;}async logout(){try{await apiClient.post('/auth/logout');}catch(error){// Even if logout fails on server, clear local storage\nconsole.warn('Logout request failed, but clearing local storage anyway');}finally{this.clearStorage();}}getToken(){return localStorage.getItem(this.TOKEN_KEY);}getUser(){const userStr=localStorage.getItem(this.USER_KEY);return userStr?JSON.parse(userStr):null;}isAuthenticated(){return!!this.getToken();}async fetchUserProfile(){const response=await apiClient.get('/v1/users/profile');// Update stored user data with fresh profile data\nconst currentUser=this.getUser();if(currentUser){const updatedUser=_objectSpread(_objectSpread({},currentUser),response.data);localStorage.setItem(this.USER_KEY,JSON.stringify(updatedUser));}return response.data;}}const authService=new AuthService();export default authService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}