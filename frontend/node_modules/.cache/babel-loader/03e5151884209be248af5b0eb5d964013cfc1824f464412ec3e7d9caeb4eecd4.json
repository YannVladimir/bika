{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useAuth } from '../context/AuthContext';\nimport { hasPermission } from '../constants/roles';\nexport const usePermissions = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const userRole = (user === null || user === void 0 ? void 0 : user.role) || 'USER';\n  const canAccess = requiredRoles => {\n    return hasPermission(userRole, requiredRoles);\n  };\n  const isSuperAdmin = () => {\n    return userRole === 'SUPER_ADMIN';\n  };\n  const isCompanyAdmin = () => {\n    return userRole === 'COMPANY_ADMIN';\n  };\n  const isAdmin = () => {\n    return userRole === 'ADMIN';\n  };\n  const isManager = () => {\n    return userRole === 'MANAGER';\n  };\n  const isUser = () => {\n    return userRole === 'USER';\n  };\n  const canManageCompanies = () => {\n    return canAccess(['SUPER_ADMIN']);\n  };\n  const canManageUsers = () => {\n    return canAccess(['SUPER_ADMIN', 'COMPANY_ADMIN', 'ADMIN', 'MANAGER']);\n  };\n  const canManageDocumentTypes = () => {\n    return canAccess(['COMPANY_ADMIN', 'ADMIN', 'MANAGER']);\n  };\n  const canAccessArchival = () => {\n    return canAccess(['COMPANY_ADMIN', 'ADMIN', 'MANAGER', 'USER']);\n  };\n  const canAccessReports = () => {\n    return canAccess(['COMPANY_ADMIN', 'ADMIN', 'MANAGER']);\n  };\n  const canAccessSettings = () => {\n    return canAccess(['SUPER_ADMIN', 'COMPANY_ADMIN', 'ADMIN', 'MANAGER', 'USER']);\n  };\n  return {\n    userRole,\n    canAccess,\n    isSuperAdmin,\n    isCompanyAdmin,\n    isAdmin,\n    isManager,\n    isUser,\n    canManageCompanies,\n    canManageUsers,\n    canManageDocumentTypes,\n    canAccessArchival,\n    canAccessReports,\n    canAccessSettings\n  };\n};\n_s(usePermissions, \"9ep4vdl3mBfipxjmc+tQCDhw6Ik=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useAuth","hasPermission","usePermissions","_s","user","userRole","role","canAccess","requiredRoles","isSuperAdmin","isCompanyAdmin","isAdmin","isManager","isUser","canManageCompanies","canManageUsers","canManageDocumentTypes","canAccessArchival","canAccessReports","canAccessSettings"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/hooks/usePermissions.ts"],"sourcesContent":["import { useAuth } from '../context/AuthContext';\r\nimport { hasPermission, UserRole } from '../constants/roles';\r\n\r\nexport const usePermissions = () => {\r\n  const { user } = useAuth();\r\n  \r\n  const userRole = (user?.role as UserRole) || 'USER';\r\n  \r\n  const canAccess = (requiredRoles: UserRole[]): boolean => {\r\n    return hasPermission(userRole, requiredRoles);\r\n  };\r\n  \r\n  const isSuperAdmin = (): boolean => {\r\n    return userRole === 'SUPER_ADMIN';\r\n  };\r\n  \r\n  const isCompanyAdmin = (): boolean => {\r\n    return userRole === 'COMPANY_ADMIN';\r\n  };\r\n  \r\n  const isAdmin = (): boolean => {\r\n    return userRole === 'ADMIN';\r\n  };\r\n  \r\n  const isManager = (): boolean => {\r\n    return userRole === 'MANAGER';\r\n  };\r\n  \r\n  const isUser = (): boolean => {\r\n    return userRole === 'USER';\r\n  };\r\n  \r\n  const canManageCompanies = (): boolean => {\r\n    return canAccess(['SUPER_ADMIN']);\r\n  };\r\n  \r\n  const canManageUsers = (): boolean => {\r\n    return canAccess(['SUPER_ADMIN', 'COMPANY_ADMIN', 'ADMIN', 'MANAGER']);\r\n  };\r\n  \r\n  const canManageDocumentTypes = (): boolean => {\r\n    return canAccess(['COMPANY_ADMIN', 'ADMIN', 'MANAGER']);\r\n  };\r\n  \r\n  const canAccessArchival = (): boolean => {\r\n    return canAccess(['COMPANY_ADMIN', 'ADMIN', 'MANAGER', 'USER']);\r\n  };\r\n  \r\n  const canAccessReports = (): boolean => {\r\n    return canAccess(['COMPANY_ADMIN', 'ADMIN', 'MANAGER']);\r\n  };\r\n  \r\n  const canAccessSettings = (): boolean => {\r\n    return canAccess(['SUPER_ADMIN', 'COMPANY_ADMIN', 'ADMIN', 'MANAGER', 'USER']);\r\n  };\r\n  \r\n  return {\r\n    userRole,\r\n    canAccess,\r\n    isSuperAdmin,\r\n    isCompanyAdmin,\r\n    isAdmin,\r\n    isManager,\r\n    isUser,\r\n    canManageCompanies,\r\n    canManageUsers,\r\n    canManageDocumentTypes,\r\n    canAccessArchival,\r\n    canAccessReports,\r\n    canAccessSettings,\r\n  };\r\n}; "],"mappings":";AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,aAAa,QAAkB,oBAAoB;AAE5D,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAK,CAAC,GAAGJ,OAAO,CAAC,CAAC;EAE1B,MAAMK,QAAQ,GAAG,CAACD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,IAAI,KAAiB,MAAM;EAEnD,MAAMC,SAAS,GAAIC,aAAyB,IAAc;IACxD,OAAOP,aAAa,CAACI,QAAQ,EAAEG,aAAa,CAAC;EAC/C,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAe;IAClC,OAAOJ,QAAQ,KAAK,aAAa;EACnC,CAAC;EAED,MAAMK,cAAc,GAAGA,CAAA,KAAe;IACpC,OAAOL,QAAQ,KAAK,eAAe;EACrC,CAAC;EAED,MAAMM,OAAO,GAAGA,CAAA,KAAe;IAC7B,OAAON,QAAQ,KAAK,OAAO;EAC7B,CAAC;EAED,MAAMO,SAAS,GAAGA,CAAA,KAAe;IAC/B,OAAOP,QAAQ,KAAK,SAAS;EAC/B,CAAC;EAED,MAAMQ,MAAM,GAAGA,CAAA,KAAe;IAC5B,OAAOR,QAAQ,KAAK,MAAM;EAC5B,CAAC;EAED,MAAMS,kBAAkB,GAAGA,CAAA,KAAe;IACxC,OAAOP,SAAS,CAAC,CAAC,aAAa,CAAC,CAAC;EACnC,CAAC;EAED,MAAMQ,cAAc,GAAGA,CAAA,KAAe;IACpC,OAAOR,SAAS,CAAC,CAAC,aAAa,EAAE,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;EACxE,CAAC;EAED,MAAMS,sBAAsB,GAAGA,CAAA,KAAe;IAC5C,OAAOT,SAAS,CAAC,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;EACzD,CAAC;EAED,MAAMU,iBAAiB,GAAGA,CAAA,KAAe;IACvC,OAAOV,SAAS,CAAC,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;EACjE,CAAC;EAED,MAAMW,gBAAgB,GAAGA,CAAA,KAAe;IACtC,OAAOX,SAAS,CAAC,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;EACzD,CAAC;EAED,MAAMY,iBAAiB,GAAGA,CAAA,KAAe;IACvC,OAAOZ,SAAS,CAAC,CAAC,aAAa,EAAE,eAAe,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;EAChF,CAAC;EAED,OAAO;IACLF,QAAQ;IACRE,SAAS;IACTE,YAAY;IACZC,cAAc;IACdC,OAAO;IACPC,SAAS;IACTC,MAAM;IACNC,kBAAkB;IAClBC,cAAc;IACdC,sBAAsB;IACtBC,iBAAiB;IACjBC,gBAAgB;IAChBC;EACF,CAAC;AACH,CAAC;AAAChB,EAAA,CApEWD,cAAc;EAAA,QACRF,OAAO;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}