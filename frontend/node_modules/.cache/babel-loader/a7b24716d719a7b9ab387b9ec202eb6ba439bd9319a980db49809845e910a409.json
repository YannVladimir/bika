{"ast":null,"code":"import apiClient from './client';\n\n// Field types for document type fields\n\n// Document field interface\n\n// Document type interface (enhanced)\n\nclass DocumentTypeService {\n  async getDocumentTypes() {\n    const response = await apiClient.get('/v1/document-types');\n    return response.data;\n  }\n  async getDocumentTypesByCompany(companyId) {\n    const response = await apiClient.get(`/v1/document-types/company/${companyId}`);\n    return response.data;\n  }\n  async getDocumentTypeById(id) {\n    const response = await apiClient.get(`/v1/document-types/${id}`);\n    return response.data;\n  }\n  async createDocumentType(documentTypeData) {\n    const response = await apiClient.post('/v1/document-types', documentTypeData);\n    return response.data;\n  }\n  async updateDocumentType(id, documentTypeData) {\n    const response = await apiClient.put(`/v1/document-types/${id}`, documentTypeData);\n    return response.data;\n  }\n  async deleteDocumentType(id) {\n    await apiClient.delete(`/v1/document-types/${id}`);\n  }\n\n  // Helper method to generate field key from name\n  generateFieldKey(name) {\n    return name.toLowerCase().replace(/[^a-z0-9\\s]/g, '') // Remove special characters\n    .replace(/\\s+/g, '_') // Replace spaces with underscores\n    .trim();\n  }\n\n  // Helper method to create a new field with default values\n  createNewField(name, type) {\n    return {\n      name,\n      fieldKey: this.generateFieldKey(name),\n      fieldType: type,\n      required: false,\n      active: true,\n      options: type === 'SELECT' ? [] : undefined\n    };\n  }\n}\nconst documentTypeService = new DocumentTypeService();\nexport default documentTypeService;","map":{"version":3,"names":["apiClient","DocumentTypeService","getDocumentTypes","response","get","data","getDocumentTypesByCompany","companyId","getDocumentTypeById","id","createDocumentType","documentTypeData","post","updateDocumentType","put","deleteDocumentType","delete","generateFieldKey","name","toLowerCase","replace","trim","createNewField","type","fieldKey","fieldType","required","active","options","undefined","documentTypeService"],"sources":["C:/Users/Administrator/Desktop/bika/bika/frontend/src/services/api/documentTypeService.ts"],"sourcesContent":["import apiClient from './client';\r\n\r\n// Field types for document type fields\r\nexport type FieldType = 'TEXT' | 'TEXTAREA' | 'NUMBER' | 'DATE' | 'SELECT' | 'CHECKBOX' | 'EMAIL' | 'PHONE' | 'URL';\r\n\r\n// Document field interface\r\nexport interface DocumentField {\r\n  id?: number;\r\n  name: string;\r\n  fieldKey: string;\r\n  fieldType: FieldType;\r\n  required: boolean;\r\n  description?: string;\r\n  defaultValue?: string;\r\n  validationRules?: string;\r\n  options?: string[];\r\n  displayOrder?: number;\r\n  active: boolean;\r\n}\r\n\r\n// Document type interface (enhanced)\r\nexport interface DocumentType {\r\n  id?: number;\r\n  name: string;\r\n  code: string;\r\n  description?: string;\r\n  companyId: number;\r\n  fields: DocumentField[];\r\n  isActive: boolean;\r\n}\r\n\r\nclass DocumentTypeService {\r\n  async getDocumentTypes(): Promise<DocumentType[]> {\r\n    const response = await apiClient.get<DocumentType[]>('/v1/document-types');\r\n    return response.data;\r\n  }\r\n\r\n  async getDocumentTypesByCompany(companyId: number): Promise<DocumentType[]> {\r\n    const response = await apiClient.get<DocumentType[]>(`/v1/document-types/company/${companyId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async getDocumentTypeById(id: number): Promise<DocumentType> {\r\n    const response = await apiClient.get<DocumentType>(`/v1/document-types/${id}`);\r\n    return response.data;\r\n  }\r\n\r\n  async createDocumentType(documentTypeData: Partial<DocumentType>): Promise<DocumentType> {\r\n    const response = await apiClient.post<DocumentType>('/v1/document-types', documentTypeData);\r\n    return response.data;\r\n  }\r\n\r\n  async updateDocumentType(id: number, documentTypeData: Partial<DocumentType>): Promise<DocumentType> {\r\n    const response = await apiClient.put<DocumentType>(`/v1/document-types/${id}`, documentTypeData);\r\n    return response.data;\r\n  }\r\n\r\n  async deleteDocumentType(id: number): Promise<void> {\r\n    await apiClient.delete(`/v1/document-types/${id}`);\r\n  }\r\n\r\n  // Helper method to generate field key from name\r\n  generateFieldKey(name: string): string {\r\n    return name\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9\\s]/g, '') // Remove special characters\r\n      .replace(/\\s+/g, '_') // Replace spaces with underscores\r\n      .trim();\r\n  }\r\n\r\n  // Helper method to create a new field with default values\r\n  createNewField(name: string, type: FieldType): DocumentField {\r\n    return {\r\n      name,\r\n      fieldKey: this.generateFieldKey(name),\r\n      fieldType: type,\r\n      required: false,\r\n      active: true,\r\n      options: type === 'SELECT' ? [] : undefined,\r\n    };\r\n  }\r\n}\r\n\r\nconst documentTypeService = new DocumentTypeService();\r\nexport default documentTypeService; "],"mappings":"AAAA,OAAOA,SAAS,MAAM,UAAU;;AAEhC;;AAGA;;AAeA;;AAWA,MAAMC,mBAAmB,CAAC;EACxB,MAAMC,gBAAgBA,CAAA,EAA4B;IAChD,MAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAiB,oBAAoB,CAAC;IAC1E,OAAOD,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMC,yBAAyBA,CAACC,SAAiB,EAA2B;IAC1E,MAAMJ,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAiB,8BAA8BG,SAAS,EAAE,CAAC;IAC/F,OAAOJ,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMG,mBAAmBA,CAACC,EAAU,EAAyB;IAC3D,MAAMN,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAe,sBAAsBK,EAAE,EAAE,CAAC;IAC9E,OAAON,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMK,kBAAkBA,CAACC,gBAAuC,EAAyB;IACvF,MAAMR,QAAQ,GAAG,MAAMH,SAAS,CAACY,IAAI,CAAe,oBAAoB,EAAED,gBAAgB,CAAC;IAC3F,OAAOR,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMQ,kBAAkBA,CAACJ,EAAU,EAAEE,gBAAuC,EAAyB;IACnG,MAAMR,QAAQ,GAAG,MAAMH,SAAS,CAACc,GAAG,CAAe,sBAAsBL,EAAE,EAAE,EAAEE,gBAAgB,CAAC;IAChG,OAAOR,QAAQ,CAACE,IAAI;EACtB;EAEA,MAAMU,kBAAkBA,CAACN,EAAU,EAAiB;IAClD,MAAMT,SAAS,CAACgB,MAAM,CAAC,sBAAsBP,EAAE,EAAE,CAAC;EACpD;;EAEA;EACAQ,gBAAgBA,CAACC,IAAY,EAAU;IACrC,OAAOA,IAAI,CACRC,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IAAA,CAC5BA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAAA,CACrBC,IAAI,CAAC,CAAC;EACX;;EAEA;EACAC,cAAcA,CAACJ,IAAY,EAAEK,IAAe,EAAiB;IAC3D,OAAO;MACLL,IAAI;MACJM,QAAQ,EAAE,IAAI,CAACP,gBAAgB,CAACC,IAAI,CAAC;MACrCO,SAAS,EAAEF,IAAI;MACfG,QAAQ,EAAE,KAAK;MACfC,MAAM,EAAE,IAAI;MACZC,OAAO,EAAEL,IAAI,KAAK,QAAQ,GAAG,EAAE,GAAGM;IACpC,CAAC;EACH;AACF;AAEA,MAAMC,mBAAmB,GAAG,IAAI7B,mBAAmB,CAAC,CAAC;AACrD,eAAe6B,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}